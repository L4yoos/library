version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - library-network

  broker:
    image: confluentinc/cp-kafka:7.5.0
    hostname: broker
    container_name: broker
    ports:
      - "9092:9092"
      - "9093:9093"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9093,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - library-network

  postgres_db:
    image: postgres:16-alpine
    container_name: library_postgres_db
    environment:
      POSTGRES_DB: library_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - library-network

  eureka-server:
    build:
      context: .
      dockerfile: ./eureka-server/Dockerfile
    container_name: library_eureka_server
    ports:
      - "8761:8761"
    environment:
      SPRING_APPLICATION_NAME: eureka-server
    volumes:
      - maven_cache:/root/.m2
    networks:
      - library-network

  book-service:
    build:
      context: .
      dockerfile: ./book-service/Dockerfile
    container_name: library_book_service
    ports:
      - "8880:8880"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres_db:5432/library_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      INTERNAL_API_KEY_HEADER_NAME: ${INTERNAL_API_KEY_HEADER_NAME}
      INTERNAL_API_KEY_VALUE: ${INTERNAL_API_KEY_VALUE}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION_MS: ${JWT_EXPIRATION_MS}
    depends_on:
      postgres_db:
        condition: service_healthy
      eureka-server:
        condition: service_started
    volumes:
      - maven_cache:/root/.m2
    networks:
      - library-network

  user-service:
    build:
      context: .
      dockerfile: ./user-service/Dockerfile
    container_name: library_user_service
    ports:
      - "8881:8881"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres_db:5432/library_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      INTERNAL_API_KEY_HEADER_NAME: ${INTERNAL_API_KEY_HEADER_NAME}
      INTERNAL_API_KEY_VALUE: ${INTERNAL_API_KEY_VALUE}
    depends_on:
      postgres_db:
        condition: service_healthy
      eureka-server:
        condition: service_started
    volumes:
      - maven_cache:/root/.m2
    networks:
      - library-network

  loan-service:
    build:
      context: .
      dockerfile: ./loan-service/Dockerfile
    container_name: library_loan_service
    ports:
      - "8882:8882"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres_db:5432/library_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      INTERNAL_API_KEY_HEADER_NAME: ${INTERNAL_API_KEY_HEADER_NAME}
      INTERNAL_API_KEY_VALUE: ${INTERNAL_API_KEY_VALUE}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION_MS: ${JWT_EXPIRATION_MS}
    depends_on:
      postgres_db:
        condition: service_healthy
#      book-service:
#        condition: service_started
#      user-service:
#        condition: service_started
#      eureka-server:
#        condition: service_started
    volumes:
      - maven_cache:/root/.m2
    networks:
      - library-network

  notification-service:
    build:
      context: .
      dockerfile: ./notification-service/Dockerfile
    container_name: library_notification_service
    ports:
      - "8883:8883"
    environment:
      resend.api-key: ${RESEND_API_KEY}
      resend.sender-email: onboarding@resend.dev
    depends_on:
      broker:
        condition: service_started
      user-service:
        condition: service_started
      book-service:
        condition: service_started
      eureka-server:
        condition: service_started
    volumes:
      - maven_cache:/root/.m2
    networks:
      - library-network

  auth-service:
    build:
      context: .
      dockerfile: ./auth-service/Dockerfile
    container_name: library_auth_service
    ports:
      - "8884:8884"
    environment:
      INTERNAL_API_KEY_HEADER_NAME: ${INTERNAL_API_KEY_HEADER_NAME}
      INTERNAL_API_KEY_VALUE: ${INTERNAL_API_KEY_VALUE}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION_MS: ${JWT_EXPIRATION_MS}
    depends_on:
      user-service:
        condition: service_started
      eureka-server:
        condition: service_started
    volumes:
      - maven_cache:/root/.m2
    networks:
      - library-network

  api-gateway:
    build:
      context: .
      dockerfile: ./api-gateway/Dockerfile
    container_name: library_api_gateway
    ports:
      - "8081:8081"
    environment:
      SPRING_APPLICATION_NAME: api-gateway
    depends_on:
      auth-service:
        condition: service_started
      user-service:
        condition: service_started
      book-service:
        condition: service_started
      loan-service:
        condition: service_started
      eureka-server:
        condition: service_started
    volumes:
      - maven_cache:/root/.m2
    networks:
      - library-network

volumes:
  postgres_data:
  maven_cache:

networks:
  library-network:
    driver: bridge